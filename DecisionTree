{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOvw5r24w6A7JtsrOAxuKok",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Hrithikkumar30/Flutter_Learning/blob/main/DecisionTree\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dxj5XPEYlli5"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datasets =pd.read_csv('/content/Position_Salaries.csv')\n",
        "X = datasets.iloc[: , 1:-1].values\n",
        "y = datasets.iloc[: , -1].values\n",
        "\n"
      ],
      "metadata": {
        "id": "OQLYYVt9mGiM"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "DstReg = DecisionTreeRegressor(random_state = 0)\n",
        "\n",
        "DstReg.fit(X, y)"
      ],
      "metadata": {
        "id": "dQzEoo5XmVPm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d6dea83-f9bc-4156-a337-b9bafa796b37"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(random_state=0)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "DstReg.predict([[6.5]])\n"
      ],
      "metadata": {
        "id": "RpjuKvBfmTav",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fdb56426-aead-47d4-ead2-3516d613833f"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([150000.])"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.svm import SVR\n",
        "regressor = SVR(kernel = 'rbf')  #kernel = 'rbf' is the default kernel helps to avoid overfitting\n",
        "regressor.fit(X , y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bqnuw3PdmcQj",
        "outputId": "5c6ca5f1-5507-42cb-febf-196635c3c91c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVR()"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sc_y.inverse_transform(regressor.predict(sc_x.transform([[6.9]])))  #inverse transform the prediction to get the actual value\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "ztDrJUnrmfiA",
        "outputId": "e72a89e6-6e70-4d01-9870-e9283eb4a6e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-8b195e4aa76e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msc_y\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mregressor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msc_x\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m6.9\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m#inverse transform the prediction to get the actual value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36minverse_transform\u001b[0;34m(self, X, copy)\u001b[0m\n\u001b[1;32m   1020\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1021\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFLOAT_DTYPES\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1022\u001b[0;31m             \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1023\u001b[0m         )\n\u001b[1;32m   1024\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    771\u001b[0m                     \u001b[0;34m\"Reshape your data either using array.reshape(-1, 1) if \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    772\u001b[0m                     \u001b[0;34m\"your data has a single feature or array.reshape(1, -1) \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 773\u001b[0;31m                     \u001b[0;34m\"if it contains a single sample.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    774\u001b[0m                 )\n\u001b[1;32m    775\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Expected 2D array, got 1D array instead:\narray=[-0.17300474].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(sc_x.inverse_transform(X), sc_y.inverse_transform(y), color = 'red')\n",
        "plt.plot(sc_x.inverse_transform(X), sc_y.inverse_transform(regressor.predict(X)), color = 'blue')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 674
        },
        "id": "ly4gs8T4otzX",
        "outputId": "5d72e030-607f-4eba-97c0-eb266195963a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-15-c417a1259687>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msc_x\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msc_y\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'red'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msc_x\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msc_y\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minverse_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mregressor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'blue'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36minverse_transform\u001b[0;34m(self, X, copy)\u001b[0m\n\u001b[1;32m   1020\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1021\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFLOAT_DTYPES\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1022\u001b[0;31m             \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1023\u001b[0m         )\n\u001b[1;32m   1024\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    771\u001b[0m                     \u001b[0;34m\"Reshape your data either using array.reshape(-1, 1) if \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    772\u001b[0m                     \u001b[0;34m\"your data has a single feature or array.reshape(1, -1) \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 773\u001b[0;31m                     \u001b[0;34m\"if it contains a single sample.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    774\u001b[0m                 )\n\u001b[1;32m    775\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Expected 2D array, got 1D array instead:\narray=[-0.6197853  -0.62924694 -0.56788994 -0.49732233 -0.44690338 -0.36617206\n -0.14115569  0.28557658  0.78226531  1.08559794].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New section"
      ],
      "metadata": {
        "id": "qHuNnqNFlsvG"
      }
    }
  ]
}